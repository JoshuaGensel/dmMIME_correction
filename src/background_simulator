import numpy as np
from scipy.stats import gmean

# parameters
number_positions = 3
number_states = 4
number_samples = 10000
probability_mutation = 0.2

# generate ground truth from log-normal distribution
# np.random.seed(0)
ground_truth = np.ones((number_states, number_positions))
for i in range(1, number_states):
    ground_truth[i] = np.round(np.random.lognormal(mean=0, sigma=1, size=number_positions),1)

print(ground_truth)

# generate samples
p_default_state = 1 - probability_mutation
p_state_change = probability_mutation / (number_states - 1)
samples = np.zeros((number_samples, number_positions))
for i in range(number_samples):
    samples[i] = np.random.choice(number_states, size=number_positions, p=[p_default_state] + [p_state_change] * (number_states - 1))

# print(samples)

# compute sequence Kd values as product of ground truth values at positions
sequence_Kd_values = np.zeros(number_samples)
for i in range(number_samples):
    sequence_Kd_values[i] = np.prod([ground_truth[int(samples[i,j]), j] for j in range(number_positions)])

# print(sequence_Kd_values)

# compute measured values for every state at every position
measured_values = np.zeros((number_states, number_positions))
# measured values are average sequence Kd values for sequences with that state at that position divided by the average sequence Kd values for sequences with the default state at that position
for i in range(number_states):
    for j in range(number_positions):
        measured_values[i,j] = gmean(sequence_Kd_values[samples[:,j] == i])/gmean(sequence_Kd_values[samples[:,j] == 0])

print(measured_values)

# compute true background values for every state at every position
# true background values are the measured values divided by the ground truth values
true_background_values = measured_values / ground_truth

# print(true_background_values)


# compute average background values for every state at every position
average_background_values = np.zeros((number_states, number_positions))
# average background values are the average sequence Kd values for sequences with that state at that position divided by the ground truth value of that state at that position divided by the average sequence Kd values for sequences with the default state at that position
for i in range(number_states):
    for j in range(number_positions):
        average_background_values[i,j] = (gmean(sequence_Kd_values[samples[:,j] == i])/ground_truth[i,j])/(gmean(sequence_Kd_values[samples[:,j] == 0])/ground_truth[0,j])

# print(average_background_values)
        
print("true_background_values == average_background_values: ", np.allclose(true_background_values, average_background_values))
# print("true_background_values: \n", true_background_values)
# print("average_background_values: \n", average_background_values)

# get Kd values for all sequences
Kd_value_list = np.zeros((number_samples, number_positions))
for i in range(number_samples):
    # look up Kd values for all positions of sequence i
    Kd_value_list[i] = [ground_truth[int(samples[i,j]), j] for j in range(number_positions)]

print(Kd_value_list)

# # compute correlation of rows
# correlation_matrix = np.corrcoef(Kd_value_list)
# # show histogram of correlation values
# import matplotlib.pyplot as plt
# plt.hist(correlation_matrix.flatten(), bins=100)
# plt.show()

# check if geometric mean of sequence Kd values is the same as the product of the geometric mean of the Kd values of the positions
print('difference between average sequence Kd and product of average position Kds:')
print(' overall:', gmean(sequence_Kd_values) - np.prod([gmean(Kd_value_list[:,j]) for j in range(number_positions)]))
# check if this is still true for an arbitrary subset of sequences
subset = np.random.choice(number_samples, 100)
print('arbitrary subset:', gmean(sequence_Kd_values[subset]) - np.prod([gmean(Kd_value_list[subset,j]) for j in range(number_positions)]))


# IMPORTANT: the difference between average sequence Kd and product of average position Kds is only close to 0 if we use the geometric mean
